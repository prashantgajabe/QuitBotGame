(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('crypto-js')) :
    typeof define === 'function' && define.amd ? define('ngx-encrypt-cookie', ['exports', '@angular/core', '@angular/common', 'crypto-js'], factory) :
    (global = global || self, factory(global['ngx-encrypt-cookie'] = {}, global.ng.core, global.ng.common, global.cryptoJs));
}(this, (function (exports, core, common, cryptoJs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngx-encrypt-cookie.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxEncryptCookieService = /** @class */ (function () {
        function NgxEncryptCookieService(platformId) {
            this.platformId = platformId;
            this.documentIsAccessible = common.isPlatformBrowser(this.platformId);
        }
        /**
         * @param keySize Cookie name
         * @param passPhrase secret passPhrase
         * @returns returns key when setting cookie and getting cookie
         * default keySize is 128/32 and default passPhrase is "Secret PassPhrase"
         */
        /**
         * @param {?=} keySize Cookie name
         * @param {?=} passPhrase secret passPhrase
         * @return {?} returns key when setting cookie and getting cookie
         * default keySize is 128/32 and default passPhrase is "Secret PassPhrase"
         */
        NgxEncryptCookieService.prototype.generateKey = /**
         * @param {?=} keySize Cookie name
         * @param {?=} passPhrase secret passPhrase
         * @return {?} returns key when setting cookie and getting cookie
         * default keySize is 128/32 and default passPhrase is "Secret PassPhrase"
         */
        function (keySize, passPhrase) {
            /** @type {?} */
            var salt = cryptoJs.lib.WordArray.random(128 / 8);
            /** @type {?} */
            var keySizeBytes;
            /** @type {?} */
            var secrtePassPhrase;
            keySize ? keySizeBytes = keySize : keySizeBytes = "128/32";
            passPhrase ? secrtePassPhrase = passPhrase : secrtePassPhrase = "Secret PassPhrase";
            switch (keySizeBytes) {
                case "128/32":
                    /** @type {?} */
                    var msg = cryptoJs.PBKDF2(secrtePassPhrase, salt, { keySize: 128 / 32 });
                    return msg.toString();
                    break;
                case "256/32":
                    /** @type {?} */
                    var msg = cryptoJs.PBKDF2(secrtePassPhrase, salt, { keySize: 256 / 32 });
                    return msg.toString();
                    break;
                case "512/32":
                    /** @type {?} */
                    var msg = cryptoJs.PBKDF2(secrtePassPhrase, salt, { keySize: 512 / 32 });
                    return msg.toString();
                    break;
            }
        };
        /**
         * encrypt() is calling when set() calls
         * @param val value to store in cookies
         * @param secret_key is a key generated by using generateKey() or user defined key.
         * @returns encrypted val to set() and there the cookie will set. if user doesnt generateKey or pass key error will be thrown.
        */
        /**
         * encrypt() is calling when set() calls
         * @private
         * @param {?} val value to store in cookies
         * @param {?} secret_key is a key generated by using generateKey() or user defined key.
         * @return {?} encrypted val to set() and there the cookie will set. if user doesnt generateKey or pass key error will be thrown.
         */
        NgxEncryptCookieService.prototype.encrypt = /**
         * encrypt() is calling when set() calls
         * @private
         * @param {?} val value to store in cookies
         * @param {?} secret_key is a key generated by using generateKey() or user defined key.
         * @return {?} encrypted val to set() and there the cookie will set. if user doesnt generateKey or pass key error will be thrown.
         */
        function (val, secret_key) {
            if (secret_key != null || secret_key != "" || secret_key.length > 0) {
                /** @type {?} */
                var encrypt_msg = cryptoJs.AES.encrypt(val, secret_key);
                return encrypt_msg;
            }
            else {
                console.error("Pass Secret key to set cookie");
            }
        };
        /**
         *
         * @param cookie_name cookie name which is stored
         * @param encrypted boolean - cookie stored having encrypted val or not
         * @param secret_key is key which is used to encrypt cookie val. it is not required if encrypted is false
         */
        /**
         *
         * @private
         * @param {?} cookieName
         * @param {?} encrypted boolean - cookie stored having encrypted val or not
         * @param {?=} secret_key is key which is used to encrypt cookie val. it is not required if encrypted is false
         * @return {?}
         */
        NgxEncryptCookieService.prototype.decrypt = /**
         *
         * @private
         * @param {?} cookieName
         * @param {?} encrypted boolean - cookie stored having encrypted val or not
         * @param {?=} secret_key is key which is used to encrypt cookie val. it is not required if encrypted is false
         * @return {?}
         */
        function (cookieName, encrypted, secret_key) {
            if (this.documentIsAccessible && this.check(cookieName)) {
                cookieName = encodeURIComponent(cookieName);
                /** @type {?} */
                var regExp = this.getCookieRegExp(cookieName);
                /** @type {?} */
                var result = regExp.exec(document.cookie);
                if (encrypted) {
                    if (secret_key) {
                        /** @type {?} */
                        var encrypt_msg = this.safeDecodeURIComponent(result[1]);
                        /** @type {?} */
                        var decrypt_msg = cryptoJs.AES.decrypt(encrypt_msg, secret_key);
                        /** @type {?} */
                        var message = decrypt_msg.toString(cryptoJs.enc.Utf8);
                        return message;
                    }
                    else {
                        console.error("pass secret key to get cookie value");
                    }
                }
                else {
                    return this.safeDecodeURIComponent(result[1]);
                }
            }
            else {
                return '';
            }
        };
        /**
         * @param cookieName Cookie name
         * @returns boolean  whether cookie with specified name is existed or not
         */
        /**
         * @param {?} cookieName Cookie name
         * @return {?} boolean  whether cookie with specified name is existed or not
         */
        NgxEncryptCookieService.prototype.check = /**
         * @param {?} cookieName Cookie name
         * @return {?} boolean  whether cookie with specified name is existed or not
         */
        function (cookieName) {
            if (!this.documentIsAccessible) {
                return false;
            }
            /** @type {?} */
            var name = encodeURIComponent(cookieName);
            /** @type {?} */
            var regExp = this.getCookieRegExp(name);
            /** @type {?} */
            var exists = regExp.test(document.cookie);
            return exists;
        };
        /**
         *
         * @param cookieName cookie name
         * @param encryption boolean - whether to want encrypted or decrypted value.
         * @param key - it should enter if encrypted=true otherwise error will be thrown.key can be either generated using generateKey() or
                         user definded key
         */
        /**
         *
         * @param {?} cookieName cookie name
         * @param {?} encryption boolean - whether to want encrypted or decrypted value.
         * @param {?=} key - it should enter if encrypted=true otherwise error will be thrown.key can be either generated using generateKey() or
         * user definded key
         * @return {?}
         */
        NgxEncryptCookieService.prototype.get = /**
         *
         * @param {?} cookieName cookie name
         * @param {?} encryption boolean - whether to want encrypted or decrypted value.
         * @param {?=} key - it should enter if encrypted=true otherwise error will be thrown.key can be either generated using generateKey() or
         * user definded key
         * @return {?}
         */
        function (cookieName, encryption, key) {
            /** @type {?} */
            var val;
            if (encryption) {
                if (key) {
                    val = this.decrypt(cookieName, encryption, key);
                    return val;
                }
            }
            // if key is not passed or encrypted = false;
            val = this.decrypt(cookieName, false, null);
            return val;
        };
        /**
         * @param encrypted boolean - to know encrypted values are there
         * @param key  generatedKey() or user defined key - to decrypt encrypted values
         * @returns cookies - all the cookies  stored
         */
        /**
         * @param {?=} encrypted boolean - to know encrypted values are there
         * @param {?=} key  generatedKey() or user defined key - to decrypt encrypted values
         * @return {?} cookies - all the cookies  stored
         */
        NgxEncryptCookieService.prototype.getAll = /**
         * @param {?=} encrypted boolean - to know encrypted values are there
         * @param {?=} key  generatedKey() or user defined key - to decrypt encrypted values
         * @return {?} cookies - all the cookies  stored
         */
        function (encrypted, key) {
            var _this = this;
            if (!this.documentIsAccessible) {
                return {};
            }
            /** @type {?} */
            var cookies = {};
            if (encrypted) {
                if (document.cookie && document.cookie !== '') {
                    document.cookie.split(';').forEach((/**
                     * @param {?} currentCookie
                     * @return {?}
                     */
                    function (currentCookie) {
                        var _a = __read(currentCookie.split('='), 2), cookieName = _a[0], cookieValue = _a[1];
                        /** @type {?} */
                        var cookie_name = _this.safeDecodeURIComponent(cookieName.replace(/^ /, ''));
                        /** @type {?} */
                        var cookie_val = _this.get(cookie_name, encrypted, key);
                        cookies[_this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = cookie_val;
                        // cookies[]
                    }));
                }
            }
            else {
                if (document.cookie && document.cookie !== '') {
                    document.cookie.split(';').forEach((/**
                     * @param {?} currentCookie
                     * @return {?}
                     */
                    function (currentCookie) {
                        var _a = __read(currentCookie.split('='), 2), cookieName = _a[0], cookieValue = _a[1];
                        /** @type {?} */
                        var cookie_name = _this.safeDecodeURIComponent(cookieName.replace(/^ /, ''));
                        cookies[_this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = _this.safeDecodeURIComponent(cookieValue);
                        // cookies[]
                    }));
                }
            }
            return cookies;
        };
        /**
         * @private
         * @return {?}
         */
        NgxEncryptCookieService.prototype.getAllCookies = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.documentIsAccessible) {
                return {};
            }
            /** @type {?} */
            var cookies = {};
            if (document.cookie && document.cookie !== '') {
                document.cookie.split(';').forEach((/**
                 * @param {?} currentCookie
                 * @return {?}
                 */
                function (currentCookie) {
                    var _a = __read(currentCookie.split('='), 2), cookieName = _a[0], cookieValue = _a[1];
                    /** @type {?} */
                    var cookie_name = _this.safeDecodeURIComponent(cookieName.replace(/^ /, ''));
                    cookies[_this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = _this.safeDecodeURIComponent(cookieValue);
                    // cookies[]
                }));
            }
            return cookies;
        };
        /**
         * @param name     Cookie name
         * @param value    Cookie value
         * @param encrypt  boolean - to encrypt cookie value or not
         * @param key      a key can either generate using generateKey() or user defined key
         * @param expires  Number of days until the cookies expires or an actual `Date`
         * @param path     Cookie path (eg:"/")
         * @param domain   Cookie domain (eg:"domain.com")
         * @param secure   Secure flag
         * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`
         */
        /**
         * @param {?} name     Cookie name
         * @param {?} value    Cookie value
         * @param {?} encrypt  boolean - to encrypt cookie value or not
         * @param {?=} key      a key can either generate using generateKey() or user defined key
         * @param {?=} expires  Number of days until the cookies expires or an actual `Date`
         * @param {?=} path     Cookie path (eg:"/")
         * @param {?=} domain   Cookie domain (eg:"domain.com")
         * @param {?=} secure   Secure flag
         * @param {?=} sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`
         * @return {?}
         */
        NgxEncryptCookieService.prototype.set = /**
         * @param {?} name     Cookie name
         * @param {?} value    Cookie value
         * @param {?} encrypt  boolean - to encrypt cookie value or not
         * @param {?=} key      a key can either generate using generateKey() or user defined key
         * @param {?=} expires  Number of days until the cookies expires or an actual `Date`
         * @param {?=} path     Cookie path (eg:"/")
         * @param {?=} domain   Cookie domain (eg:"domain.com")
         * @param {?=} secure   Secure flag
         * @param {?=} sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`
         * @return {?}
         */
        function (name, value, encrypt, key, expires, path, domain, secure, sameSite) {
            if (sameSite === void 0) { sameSite = 'Lax'; }
            /** @type {?} */
            var cookieString;
            if (!this.documentIsAccessible) {
                return;
            }
            if (encrypt) {
                if (key) {
                    /** @type {?} */
                    var encrypted_msg = this.encrypt(value, key);
                    cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(encrypted_msg) + ';';
                }
                else {
                    console.error("pass key to encrypt cookie value");
                    return "key fail";
                }
            }
            else {
                cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';
            }
            if (expires) {
                if (typeof expires === 'number') {
                    /** @type {?} */
                    var dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);
                    cookieString += 'expires=' + dateExpires.toUTCString() + ';';
                }
                else {
                    cookieString += 'expires=' + expires.toUTCString() + ';';
                }
            }
            if (path) {
                cookieString += 'path=' + path + ';';
            }
            if (domain) {
                cookieString += 'domain=' + domain + ';';
            }
            if (secure === false && sameSite === 'None') {
                secure = true;
                console.warn("[ngx-secure-cookies] Cookie " + name + " was forced with secure flag because sameSite=None.");
            }
            if (secure) {
                cookieString += 'secure;';
            }
            cookieString += 'sameSite=' + sameSite + ';';
            document.cookie = cookieString;
            return true;
        };
        /**
         * @param name   Cookie name
         * @param path   Cookie path
         * @param domain Cookie domain
         */
        /**
         * @param {?} name   Cookie name
         * @param {?=} path   Cookie path
         * @param {?=} domain Cookie domain
         * @param {?=} secure
         * @param {?=} sameSite
         * @return {?}
         */
        NgxEncryptCookieService.prototype.delete = /**
         * @param {?} name   Cookie name
         * @param {?=} path   Cookie path
         * @param {?=} domain Cookie domain
         * @param {?=} secure
         * @param {?=} sameSite
         * @return {?}
         */
        function (name, path, domain, secure, sameSite) {
            if (sameSite === void 0) { sameSite = 'Lax'; }
            if (!this.documentIsAccessible) {
                return;
            }
            this.set(name, '', false, "", new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain, secure, sameSite);
        };
        /**
         * @param path   Cookie path
         * @param domain Cookie domain
         */
        /**
         * @param {?=} path   Cookie path
         * @param {?=} domain Cookie domain
         * @param {?=} secure
         * @param {?=} sameSite
         * @return {?}
         */
        NgxEncryptCookieService.prototype.deleteAll = /**
         * @param {?=} path   Cookie path
         * @param {?=} domain Cookie domain
         * @param {?=} secure
         * @param {?=} sameSite
         * @return {?}
         */
        function (path, domain, secure, sameSite) {
            if (sameSite === void 0) { sameSite = 'Lax'; }
            if (!this.documentIsAccessible) {
                return;
            }
            /** @type {?} */
            var cookies = this.getAllCookies();
            for (var cookieName in cookies) {
                if (cookies.hasOwnProperty(cookieName)) {
                    this.delete(cookieName, path, domain, secure, sameSite);
                }
            }
        };
        /**
         * @param name Cookie name
         * @returns property RegExp
         */
        /**
         * @private
         * @param {?} name Cookie name
         * @return {?} property RegExp
         */
        NgxEncryptCookieService.prototype.getCookieRegExp = /**
         * @private
         * @param {?} name Cookie name
         * @return {?} property RegExp
         */
        function (name) {
            /** @type {?} */
            var escapedName = name.replace(/([\[\]\{\}\(\)\|\=\;\+\?\,\.\*\^\$])/gi, '\\$1');
            return new RegExp('(?:^' + escapedName + '|;\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');
        };
        /**
         * @private
         * @param {?} encodedURIComponent
         * @return {?}
         */
        NgxEncryptCookieService.prototype.safeDecodeURIComponent = /**
         * @private
         * @param {?} encodedURIComponent
         * @return {?}
         */
        function (encodedURIComponent) {
            try {
                return decodeURIComponent(encodedURIComponent);
            }
            catch (_a) {
                return encodedURIComponent;
            }
        };
        NgxEncryptCookieService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        NgxEncryptCookieService.ctorParameters = function () { return [
            { type: core.InjectionToken, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        /** @nocollapse */ NgxEncryptCookieService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgxEncryptCookieService_Factory() { return new NgxEncryptCookieService(core.ɵɵinject(core.PLATFORM_ID)); }, token: NgxEncryptCookieService, providedIn: "root" });
        return NgxEncryptCookieService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgxEncryptCookieService.prototype.documentIsAccessible;
        /**
         * @type {?}
         * @private
         */
        NgxEncryptCookieService.prototype.platformId;
    }

    exports.NgxEncryptCookieService = NgxEncryptCookieService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-encrypt-cookie.umd.js.map
