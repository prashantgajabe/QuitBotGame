import { InjectionToken } from '@angular/core';
export declare class NgxEncryptCookieService {
    private platformId;
    private readonly documentIsAccessible;
    constructor(platformId: InjectionToken<object>);
    /**
     * @param keySize Cookie name
     * @param passPhrase secret passPhrase
     * @returns returns key when setting cookie and getting cookie
     * default keySize is 128/32 and default passPhrase is "Secret PassPhrase"
     */
    generateKey(keySize?: string, passPhrase?: string): any;
    /**
     * encrypt() is calling when set() calls
     * @param val value to store in cookies
     * @param secret_key is a key generated by using generateKey() or user defined key.
     * @returns encrypted val to set() and there the cookie will set. if user doesnt generateKey or pass key error will be thrown.
    */
    private encrypt;
    /**
     *
     * @param cookie_name cookie name which is stored
     * @param encrypted boolean - cookie stored having encrypted val or not
     * @param secret_key is key which is used to encrypt cookie val. it is not required if encrypted is false
     */
    private decrypt;
    /**
     * @param cookieName Cookie name
     * @returns boolean  whether cookie with specified name is existed or not
     */
    check(cookieName: string): boolean;
    /**
     *
     * @param cookieName cookie name
     * @param encryption boolean - whether to want encrypted or decrypted value.
     * @param key - it should enter if encrypted=true otherwise error will be thrown.key can be either generated using generateKey() or
                     user definded key
     */
    get(cookieName: string, encryption: boolean, key?: string): string;
    /**
     * @param encrypted boolean - to know encrypted values are there
     * @param key  generatedKey() or user defined key - to decrypt encrypted values
     * @returns cookies - all the cookies  stored
     */
    getAll(encrypted?: boolean, key?: string): {
        [key: string]: string;
    };
    private getAllCookies;
    /**
     * @param name     Cookie name
     * @param value    Cookie value
     * @param encrypt  boolean - to encrypt cookie value or not
     * @param key      a key can either generate using generateKey() or user defined key
     * @param expires  Number of days until the cookies expires or an actual `Date`
     * @param path     Cookie path (eg:"/")
     * @param domain   Cookie domain (eg:"domain.com")
     * @param secure   Secure flag
     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`
     */
    set(name: string, value: string, encrypt: boolean, key?: string, expires?: number | Date, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): any;
    /**
     * @param name   Cookie name
     * @param path   Cookie path
     * @param domain Cookie domain
     */
    delete(name: string, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;
    /**
     * @param path   Cookie path
     * @param domain Cookie domain
     */
    deleteAll(path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;
    /**
     * @param name Cookie name
     * @returns property RegExp
     */
    private getCookieRegExp;
    private safeDecodeURIComponent;
}
